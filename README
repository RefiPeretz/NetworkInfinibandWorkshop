===================EX3===================
refi950
fimak

===================Description Ex2===================
This ex desgin to simulate connections between two types of approaches:
Eager and Rendezvous.

Base on ex1 IBVSeverClient we build the following:

EagerClientServer:
This Client/Server designed for small messages communication up to 4096[Bytes] in size.
Implementing Key-store value EagerClientServer has two options set or get.

Set: setting key and value to server "database"
Get: send request to server for certain key value the sever should response
 with the value of the key.

randClientServer:
This Client/Server designed for large messages in size.
The seg and the get functions works the same as in EagerClientServer however the
implementing the communication with RDMA. When we are setting key we request
a set through regular Eager infrastructure. We get back and address to wirte to and we
write our value.

When we produce a get request we get back from ther server the address we need to read
from using RDMA.

In order the maintain the database of the sever we implement a dictionary map in c.
This mpa store our key and values both in EagerClientServer and RandClientServer.
Also we add a smart cache for the RandClient to maintain a key and address for key we alreay
read. In this way we don't have to ask for an address of certain key we can just read it
from memory.


===================Description Ex3===================
*Approved by Alex to change mkv_release API.

Ex3 base in the code from ex2 eager server client.

The server explore the world of memory. Here we are limited with memory. Each client and server
has a limited number of buffers.

P1 - turn ex2 to a multiserver. By creating mkv we created a manager to all the client server connections.
We also manage all the memory of the buffers.
P2- We experiment with  limited memory with out a solution to what happen if we have no
memory left.
P3 - We integrate the credits system. When there is not enough memory the server will put the
request in queue. The client will not get response and after contnat number iteration will get out
form the receiving loop. Now if and only if the client will use mkv_release it will be able to get
any response from the server. When server gets credit it checks the queue and if its not empty
it send msgs from it until it empty or until it empty or the credits are done agin.

When there is a scenario of insuficent credits the server and client will loop
a contast number of iteration until they get timeout. Than the Client will have to
call mkv_release in order the proceed the server in return will send requests from queue.
The queue is implemented by an implementation of queue in c.


===================Description Ex4===================
DKVS-backed Web Server

RandIndexerServerP1.c - The indexer server, manage storage keys to each server.
according to ex description when client request url the indexer will locate
the server which hold the relevant content reference the client to it.

RandServerP1.c - server which work the same as ex3. When ask for a key
which is the relevant URL. the server will send back the content of the
requested URL.

RandClientP1.c - DKVS-backed Web client able to generate requests to multiple

===================Tests===================
We created a in the dir "serverFiles" you can find test scenario.
The folder hold 2 basic html files and a jpg image.
We also add the three object files RandServerP1 RandClientP1 RandIndexerServerP1.
This is our root directory.
We run one client one indexer and two servers(see USEAGE)


We enter each url twice each time measure the throughput:
enter mlx-stud-01:5555/index.html
enter mlx-stud-01:5555/index2.html
enter mlx-stud-01:5555/refi.jpg
enter mlx-stud-01:5555/index.html
enter mlx-stud-01:5555/index2.html
enter mlx-stud-01:5555/refi.jpg

results:
overall throughput:5.205839 for: ./index.html
overall throughput:5.220530 for: ./index_mod.html
overall throughput:181.799949 for: ./refi.jpg
overall throughput:191.988699 for: ./refi.jpg
overall throughput:5.209059 for: ./index_mod.html
overall throughput:5.231594 for: ./index.html



===================Useage===================
* In the tar you can find already compiled test scenario.
run make

Move all the three object files to serverFiles dir.

run RandClientP1 on mlx-stud-01
run RandServerP1 -p on mlx-stud-02
run RandIndexerServerP1 on mlx-stud-03
run RandServerP1 -p 61888 on mlx-stud-04
enter mlx-stud-01:5555/index.html
enter mlx-stud-01:5555/index2.html
enter mlx-stud-01:5555/refi.jpg
enter mlx-stud-01:5555/index.html
enter mlx-stud-01:5555/index2.html
enter mlx-stud-01:5555/refi.jpg

* You can change ports and server inside to code.